import dayjs from 'dayjs';
import duration from 'dayjs/plugin/duration';
import { app, BrowserWindow, ipcMain, protocol } from 'electron';
import { listoApi } from './listoApi';
import { listoScheme } from './listoScheme';

dayjs.extend(duration);

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const TEST_WINDOW_WEBPACK_ENTRY: string;
declare const TEST_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    registerApiHandlers();

    initMainWindow();
    // initIntegrationTests();
};

registerProtocolSchemes();

app.whenReady().then(async function ready() {
    registerProtocolSchemeHandlers();

    createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

function initMainWindow() {
    const mainWindow = new BrowserWindow({
        height: 768,
        width: 1024,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    mainWindow.webContents.openDevTools();
}

function initIntegrationTests() {
    const testWindow = new BrowserWindow({
        height: 768,
        width: 1024,
        webPreferences: {
            preload: TEST_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    testWindow.loadURL(TEST_WINDOW_WEBPACK_ENTRY);
}

function registerApiHandlers() {
    Object.keys(listoApi).forEach((eventName) => {
        console.log(`Registering api handler ${eventName}`);

        ipcMain.handle(eventName, function handle() {
            const handler = (listoApi as any)[eventName];

            return handler.apply(null, arguments);
        });
    });
}

function registerProtocolSchemes() {
    const { scheme } = listoScheme;

    console.log(`Registering custom protocol scheme "${scheme}://"`);

    protocol.registerSchemesAsPrivileged([
        {
            scheme,
            privileges: {
                bypassCSP: true,
                stream: true,
                supportFetchAPI: true,
            },
        },
    ]);
}

function registerProtocolSchemeHandlers() {
    const { scheme, handler } = listoScheme;

    console.log(`Registering custom protocol scheme handler for "${scheme}://"`);

    protocol.handle(scheme, handler);
}
